---
// Audio visualization page
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Audio Visualization - AI Video</title>
		<style>
			body {
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
				margin: 0;
				padding: 0;
				background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
				min-height: 100vh;
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				color: white;
			}
			
			.container {
				text-align: center;
				max-width: 1200px;
				padding: 2rem;
			}
			
			h1 {
				font-size: 2.5rem;
				margin-bottom: 1rem;
				font-weight: 700;
			}
			
			.description {
				font-size: 1.1rem;
				margin-bottom: 2rem;
				opacity: 0.9;
			}
			
			.controls {
				margin-bottom: 2rem;
				display: flex;
				gap: 1rem;
				justify-content: center;
				flex-wrap: wrap;
			}
			
			.theme-selector {
				margin-bottom: 2rem;
				display: flex;
				gap: 1rem;
				justify-content: center;
				flex-wrap: wrap;
			}
			
			.story-selector {
				margin-bottom: 2rem;
				display: flex;
				gap: 1rem;
				justify-content: center;
				flex-wrap: wrap;
			}
			
			.story-selector h3 {
				width: 100%;
				text-align: center;
				margin-bottom: 1rem;
				font-size: 1.2rem;
				font-weight: 600;
			}
			
			.story-btn {
				background: rgba(255, 255, 255, 0.2);
				border: 2px solid rgba(255, 255, 255, 0.3);
				color: white;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
			}
			
			.story-btn:hover {
				background: rgba(255, 255, 255, 0.3);
				border-color: rgba(255, 255, 255, 0.5);
				transform: translateY(-2px);
			}
			
			.story-btn.active {
				background: rgba(255, 255, 255, 0.4);
				border-color: rgba(255, 255, 255, 0.8);
				box-shadow: 0 4px 20px rgba(255, 255, 255, 0.3);
			}
			
			.export-controls {
				margin-bottom: 2rem;
				display: flex;
				gap: 1rem;
				justify-content: center;
				flex-wrap: wrap;
			}
			
			.theme-btn {
				background: rgba(255, 255, 255, 0.2);
				border: 2px solid rgba(255, 255, 255, 0.3);
				color: white;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
			}
			
			.theme-btn:hover {
				background: rgba(255, 255, 255, 0.3);
				border-color: rgba(255, 255, 255, 0.5);
				transform: translateY(-2px);
			}
			
			.theme-btn.active {
				background: rgba(255, 255, 255, 0.4);
				border-color: rgba(255, 255, 255, 0.8);
				box-shadow: 0 4px 20px rgba(255, 255, 255, 0.3);
			}
			
			.export-btn {
				background: linear-gradient(135deg, #ff6b6b, #ee5a24);
				border: 2px solid rgba(255, 255, 255, 0.3);
				color: white;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
				font-weight: 600;
			}
			
			.export-btn:hover {
				background: linear-gradient(135deg, #ff5252, #d63031);
				border-color: rgba(255, 255, 255, 0.5);
				transform: translateY(-2px);
				box-shadow: 0 4px 20px rgba(255, 107, 107, 0.3);
			}
			
			.export-btn:disabled {
				opacity: 0.5;
				cursor: not-allowed;
				transform: none;
				background: rgba(255, 255, 255, 0.2);
			}
			
			button {
				background: rgba(255, 255, 255, 0.2);
				border: 2px solid rgba(255, 255, 255, 0.3);
				color: white;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
			}
			
			button:hover {
				background: rgba(255, 255, 255, 0.3);
				border-color: rgba(255, 255, 255, 0.5);
				transform: translateY(-2px);
			}
			
			button:disabled {
				opacity: 0.5;
				cursor: not-allowed;
				transform: none;
			}
			
			.file-input {
				display: none;
			}
			
			.file-label {
				background: rgba(255, 255, 255, 0.2);
				border: 2px solid rgba(255, 255, 255, 0.3);
				color: white;
				padding: 0.75rem 1.5rem;
				border-radius: 8px;
				font-size: 1rem;
				cursor: pointer;
				transition: all 0.3s ease;
				backdrop-filter: blur(10px);
				display: inline-block;
			}
			
			.file-label:hover {
				background: rgba(255, 255, 255, 0.3);
				border-color: rgba(255, 255, 255, 0.5);
				transform: translateY(-2px);
			}
			
			.canvas-container {
				background: rgba(0, 0, 0, 0.3);
				border-radius: 12px;
				padding: 1rem;
				margin-bottom: 2rem;
				backdrop-filter: blur(10px);
			}
			
			#canvas {
				border-radius: 8px;
				box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
				background: rgba(0, 0, 0, 0.8);
			}
			
			.audio-info {
				background: rgba(255, 255, 255, 0.1);
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1rem;
				backdrop-filter: blur(10px);
			}
			
			.rms-display {
				font-size: 1.2rem;
				font-weight: 600;
				margin-bottom: 0.5rem;
			}
			
			.audio-status {
				font-size: 0.9rem;
				opacity: 0.8;
			}
			
			.export-status {
				background: rgba(255, 255, 255, 0.1);
				padding: 1rem;
				border-radius: 8px;
				margin-bottom: 1rem;
				backdrop-filter: blur(10px);
				display: none;
			}
			
			.progress-bar {
				width: 100%;
				height: 8px;
				background: rgba(255, 255, 255, 0.2);
				border-radius: 4px;
				overflow: hidden;
				margin-top: 0.5rem;
			}
			
			.progress-fill {
				height: 100%;
				background: linear-gradient(90deg, #4facfe, #00f2fe);
				width: 0%;
				transition: width 0.3s ease;
			}
		</style>
	</head>
	<body>
		<div class="container">
			<h1>Audio Visualization</h1>
			<p class="description">Upload an audio file and watch the canvas animate to the music's rhythm</p>
			
			<div class="theme-selector">
				<button class="theme-btn active" data-theme="neon">Neon</button>
				<button class="theme-btn" data-theme="retro">Retro</button>
				<button class="theme-btn" data-theme="minimal">Minimal</button>
				<button class="theme-btn" data-theme="cosmic">Cosmic</button>
				<button class="theme-btn" data-theme="fire">Fire</button>
			</div>
			
			<div class="story-selector">
				<h3>Video Story</h3>
				<button class="story-btn active" data-story="original">Original</button>
				<button class="story-btn" data-story="waveform">Waveform</button>
				<button class="story-btn" data-story="particles">Particles</button>
				<button class="story-btn" data-story="circles">Circles</button>
				<button class="story-btn" data-story="bars">Frequency Bars</button>
				<button class="story-btn" data-story="spiral">Spiral</button>
				<button class="story-btn" data-story="matrix">Matrix</button>
			</div>
			
			<div class="controls">
				<input type="file" id="audioFile" class="file-input" accept="audio/*" />
				<label for="audioFile" id="fileLabel" class="file-label">Choose Audio File</label>
				<button id="playBtn" disabled>Play</button>
				<button id="pauseBtn" disabled>Pause</button>
				<button id="stopBtn" disabled>Stop</button>
			</div>
			
			<div class="export-controls">
				<button id="exportBtn" class="export-btn" disabled>Export Video</button>
				<button id="recordBtn" disabled>Start Recording</button>
			</div>
			
			<div class="audio-info">
				<div class="rms-display">RMS: <span id="rmsValue">0.00</span></div>
				<div class="audio-status" id="audioStatus">No audio loaded</div>
			</div>
			
			<div class="export-status" id="exportStatus">
				<div id="exportMessage">Preparing export...</div>
				<div class="progress-bar">
					<div class="progress-fill" id="progressFill"></div>
				</div>
			</div>
			
			<div class="canvas-container">
				<canvas id="visualizationCanvas" width="800" height="400"></canvas>
			</div>
		</div>

		<script>
			// State variables
			let currentTheme = 'neon';
			let currentStory = 'original';
			let audioContext;
			let analyser;
			let audioSource;
			let audioElement;
			let audioSourceCreated = false;
			let isPlaying = false;
			let isRecording = false;
			let recordedFrames = [];
			let recordedAudio = null;
			let mediaRecorder;
			let recordedChunks = [];
			let animationId;
			let ffmpeg;
			let circles = [];
			let bars = [];
			let particles = [];
			let spirals = [];
			let matrixElements = [];
			
			// Canvas setup
			let canvas;
			let ctx;
			
			// Theme configurations
			const themes = {
				neon: {
					name: 'Neon',
					background: 'rgba(0, 0, 0, 0.9)',
					circleColors: ['#ff00ff', '#00ffff', '#ffff00', '#ff0080', '#8000ff'],
					barColors: ['#00ff00', '#ff0000', '#0000ff', '#ffff00', '#ff00ff'],
					particleColors: ['#ff00ff', '#00ffff', '#ffff00', '#ff0080', '#8000ff'],
					effects: ['glow', 'pulse', 'trail']
				},
				retro: {
					name: 'Retro',
					background: 'rgba(20, 20, 20, 0.9)',
					circleColors: ['#ff6b35', '#f7931e', '#ffd23f', '#f4a261', '#e76f51'],
					barColors: ['#ff6b35', '#f7931e', '#ffd23f', '#f4a261', '#e76f51'],
					particleColors: ['#ff6b35', '#f7931e', '#ffd23f', '#f4a261', '#e76f51'],
					effects: ['scanlines', 'vintage', 'grain']
				},
				minimal: {
					name: 'Minimal',
					background: 'rgba(255, 255, 255, 0.95)',
					circleColors: ['#000000', '#333333', '#666666', '#999999', '#cccccc'],
					barColors: ['#000000', '#333333', '#666666', '#999999', '#cccccc'],
					particleColors: ['#000000', '#333333', '#666666', '#999999', '#cccccc'],
					effects: ['clean', 'simple', 'elegant']
				},
				cosmic: {
					name: 'Cosmic',
					background: 'rgba(10, 5, 30, 0.9)',
					circleColors: ['#4facfe', '#00f2fe', '#43e97b', '#38f9d7', '#fa709a'],
					barColors: ['#4facfe', '#00f2fe', '#43e97b', '#38f9d7', '#fa709a'],
					particleColors: ['#4facfe', '#00f2fe', '#43e97b', '#38f9d7', '#fa709a'],
					effects: ['stars', 'nebula', 'aurora']
				},
				fire: {
					name: 'Fire',
					background: 'rgba(20, 10, 5, 0.9)',
					circleColors: ['#ff4500', '#ff6347', '#ff7f50', '#ff8c00', '#ffa500'],
					barColors: ['#ff4500', '#ff6347', '#ff7f50', '#ff8c00', '#ffa500'],
					particleColors: ['#ff4500', '#ff6347', '#ff7f50', '#ff8c00', '#ffa500'],
					effects: ['flame', 'embers', 'smoke']
				}
			};
			
			// DOM elements
			const fileInput = document.getElementById('audioFile');
			const fileLabel = document.getElementById('fileLabel');
			const playBtn = document.getElementById('playBtn');
			const pauseBtn = document.getElementById('pauseBtn');
			const stopBtn = document.getElementById('stopBtn');
			const exportBtn = document.getElementById('exportBtn');
			const recordBtn = document.getElementById('recordBtn');
			const exportStatus = document.getElementById('exportStatus');
			const exportMessage = document.getElementById('exportMessage');
			const progressFill = document.getElementById('progressFill');
			const audioStatus = document.getElementById('audioStatus');
			const rmsValue = document.getElementById('rmsValue');
			const themeBtns = document.querySelectorAll('.theme-btn');
			const storyBtns = document.querySelectorAll('.story-btn');
			
			// Initialize FFmpeg (simplified - just skip for now)
			async function initFFmpeg() {
				console.log('FFmpeg not available, using WebM export only');
				// FFmpeg will be undefined, but export will still work with WebM fallback
			}
			
			// Theme selection
			themeBtns.forEach(btn => {
				btn.addEventListener('click', () => {
					const theme = btn.dataset.theme;
					setTheme(theme);
					
					// Update active button
					themeBtns.forEach(b => b.classList.remove('active'));
					btn.classList.add('active');
				});
			});
			
			// Story selection
			storyBtns.forEach(btn => {
				btn.addEventListener('click', () => {
					const story = btn.dataset.story;
					setStory(story);
					
					// Update active button
					storyBtns.forEach(b => b.classList.remove('active'));
					btn.classList.add('active');
				});
			});
			
			// Set theme function
			function setTheme(theme) {
				currentTheme = theme;
				const themeConfig = themes[theme];
				
				// Update visualization objects with new colors
				createVisualizationObjects();
				
				// Redraw with new theme
				draw();
				
				console.log(`Theme changed to: ${themeConfig.name}`);
			}
			
			// Set story function
			function setStory(story) {
				currentStory = story;
				
				// Update visualization objects for new story
				createVisualizationObjects();
				
				// Redraw with new story
				draw();
				
				console.log(`Story changed to: ${story}`);
			}
			
			// Initialize canvas
			function initCanvas() {
				canvas = document.getElementById('canvas');
				ctx = canvas.getContext('2d');
				
				// Create initial visualization objects
				createVisualizationObjects();
				
				console.log('Canvas initialized successfully');
			}
			
			// Create visualization objects
			function createVisualizationObjects() {
				const themeConfig = themes[currentTheme];
				
				// Clear existing objects
				circles = [];
				bars = [];
				particles = [];
				spirals = [];
				matrixElements = [];
				
				switch (currentStory) {
					case 'original':
						// Create original visualization objects (circles, bars, particles)
						// Create circles
						for (let i = 0; i < 5; i++) {
							circles.push({
								x: 400,
								y: 200,
								radius: 20 + i * 10,
								scale: 1,
								rotation: 0,
								color: themeConfig.circleColors[i % themeConfig.circleColors.length],
								originalColor: themeConfig.circleColors[i % themeConfig.circleColors.length]
							});
						}
						
						// Create bars
						for (let i = 0; i < 20; i++) {
							bars.push({
								x: 50 + i * 35,
								y: 350,
								width: 30,
								height: 50,
								color: themeConfig.barColors[i % themeConfig.barColors.length],
								originalColor: themeConfig.barColors[i % themeConfig.barColors.length]
							});
						}
						
						// Create particles
						for (let i = 0; i < 50; i++) {
							particles.push({
								x: Math.random() * 800,
								y: Math.random() * 400,
								radius: 2 + Math.random() * 3,
								color: themeConfig.particleColors[i % themeConfig.particleColors.length],
								opacity: 0.6,
								trail: []
							});
						}
						break;
						
					case 'waveform':
						// Waveform doesn't need special objects
						break;
						
					case 'particles':
						// Create particles
						for (let i = 0; i < 50; i++) {
							particles.push({
								x: Math.random() * canvas.width,
								y: Math.random() * canvas.height,
								vx: (Math.random() - 0.5) * 2,
								vy: (Math.random() - 0.5) * 2,
								size: Math.random() * 4 + 1,
								color: themeConfig.particleColors[Math.floor(Math.random() * themeConfig.particleColors.length)]
							});
						}
						break;
						
					case 'circles':
						// Create circles
						for (let i = 0; i < 8; i++) {
							circles.push({
								x: canvas.width / 2,
								y: canvas.height / 2,
								radius: 20 + i * 30,
								angle: (i * Math.PI * 2) / 8,
								speed: 0.02 + i * 0.005,
								color: themeConfig.circleColors[i % themeConfig.circleColors.length]
							});
						}
						break;
						
					case 'bars':
						// Create frequency bars
						const barCount = 32;
						const barWidth = canvas.width / barCount;
						for (let i = 0; i < barCount; i++) {
							bars.push({
								x: i * barWidth,
								y: canvas.height,
								width: barWidth - 2,
								height: 0,
								targetHeight: 0,
								color: themeConfig.barColors[i % themeConfig.barColors.length]
							});
						}
						break;
						
					case 'spiral':
						// Create spiral elements
						for (let i = 0; i < 100; i++) {
							spirals.push({
								angle: (i * Math.PI * 2) / 100,
								radius: 50 + i * 2,
								speed: 0.01 + i * 0.001,
								size: Math.random() * 3 + 1,
								color: themeConfig.circleColors[i % themeConfig.circleColors.length]
							});
						}
						break;
					
					case 'matrix':
						// Create matrix elements
						const cols = 20;
						const rows = 15;
						const cellWidth = canvas.width / cols;
						const cellHeight = canvas.height / rows;
						
						for (let i = 0; i < cols; i++) {
							for (let j = 0; j < rows; j++) {
								matrixElements.push({
									x: i * cellWidth,
									y: j * cellHeight,
									width: cellWidth,
									height: cellHeight,
									value: Math.random(),
									color: themeConfig.circleColors[Math.floor(Math.random() * themeConfig.circleColors.length)]
								});
							}
						}
						break;
				}
			}
			
			// Initialize audio context
			function initAudio() {
				audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
				analyser = audioContext.createAnalyser();
				analyser.fftSize = 256;
				analyser.smoothingTimeConstant = 0.8;
			}
			
			// File input handler
			fileInput.addEventListener('change', (e) => {
				const file = (e.target as HTMLInputElement).files?.[0];
				if (file) {
					loadAudioFile(file);
				}
			});
			
			// Load audio file
			function loadAudioFile(file: File) {
				const url = URL.createObjectURL(file);
				
				// Create audio element
				audioElement = new Audio();
				audioElement.src = url;
				audioElement.crossOrigin = 'anonymous';
				
				// Update UI
				fileLabel.textContent = file.name;
				audioStatus.textContent = 'Audio loaded: ' + file.name;
				
				// Enable play button
				playBtn.disabled = false;
				stopBtn.disabled = false;
				recordBtn.disabled = false;
				
				console.log('Audio file loaded:', file.name);
			}
			
			// Play button handler
			playBtn.addEventListener('click', () => {
				if (!audioElement) return;
				
				// Resume audio context if suspended
				if (audioContext.state === 'suspended') {
					audioContext.resume();
				}
				
				// Connect audio to analyser
				if (!audioSourceCreated) {
					audioSource = audioContext.createMediaElementSource(audioElement);
					audioSource.connect(analyser);
					analyser.connect(audioContext.destination);
					audioSourceCreated = true;
				}
				
				audioElement.play();
				isPlaying = true;
				
				// Update UI
				playBtn.disabled = true;
				pauseBtn.disabled = false;
				audioStatus.textContent = 'Playing...';
				
				console.log('Audio playback started');
			});
			
			// Pause button handler
			pauseBtn.addEventListener('click', () => {
				if (!audioElement) return;
				
				audioElement.pause();
				isPlaying = false;
				
				// Update UI
				playBtn.disabled = false;
				pauseBtn.disabled = true;
				audioStatus.textContent = 'Paused';
				
				console.log('Audio playback paused');
			});
			
			// Stop button handler
			stopBtn.addEventListener('click', () => {
				if (!audioElement) return;
				
				audioElement.pause();
				audioElement.currentTime = 0;
				isPlaying = false;
				
				// Update UI
				playBtn.disabled = false;
				pauseBtn.disabled = true;
				audioStatus.textContent = 'Stopped';
				
				console.log('Audio playback stopped');
			});
			
			// Record button handler
			recordBtn.addEventListener('click', () => {
				if (isRecording) {
					stopRecording();
				} else {
					startRecording();
				}
			});
			
			// Start recording
			function startRecording() {
				if (!audioElement) {
					alert('Please load an audio file first');
					return;
				}
				
				isRecording = true;
				recordedFrames = [];
				recordedChunks = [];
				
				// Start audio playback if not already playing
				if (!isPlaying) {
					// Resume audio context if suspended
					if (audioContext.state === 'suspended') {
						audioContext.resume();
					}
					
					// Connect audio to analyser if not already connected
					if (!audioSourceCreated) {
						audioSource = audioContext.createMediaElementSource(audioElement);
						audioSource.connect(analyser);
						analyser.connect(audioContext.destination);
						audioSourceCreated = true;
					}
					
					// Start playing audio
					audioElement.play();
					isPlaying = true;
					
					// Update play/pause button states
					playBtn.disabled = true;
					pauseBtn.disabled = false;
					audioStatus.textContent = 'Recording and playing...';
				} else {
					audioStatus.textContent = 'Recording...';
				}
				
				// Update recording UI
				recordBtn.textContent = 'Stop Recording';
				recordBtn.style.background = '#ff4444';
				exportStatus.style.display = 'block';
				exportMessage.textContent = 'Recording...';
				
				console.log('Recording started with auto-playback');
			}
			
			// Stop recording
			function stopRecording() {
				isRecording = false;
				
				// Update UI
				recordBtn.textContent = 'Start Recording';
				recordBtn.style.background = '';
				exportMessage.textContent = 'Recording complete! Ready to export.';
				exportBtn.disabled = false;
				
				console.log('Recording stopped, frames captured:', recordedFrames.length);
			}
			
			// Export button handler
			exportBtn.addEventListener('click', () => {
				if (recordedFrames.length === 0) {
					alert('No recorded frames to export');
					return;
				}
				
				exportVideo();
			});
			
			// Export video function
			async function exportVideo() {
				exportMessage.textContent = 'Exporting video...';
				exportBtn.disabled = true;
				
				try {
					// Create canvas for video frames
					const videoCanvas = document.createElement('canvas');
					videoCanvas.width = 800;
					videoCanvas.height = 400;
					const videoCtx = videoCanvas.getContext('2d');
					
					if (!videoCtx) {
						throw new Error('Could not get video canvas context');
					}
					
					// Create MediaRecorder for video stream
					const videoStream = videoCanvas.captureStream(30); // 30 FPS
					
					// Create audio stream from the audio element
					const audioStream = audioElement.captureStream();
					
					// Combine video and audio streams
					const combinedStream = new MediaStream([
						...videoStream.getVideoTracks(),
						...audioStream.getAudioTracks()
					]);
					
					// Create MediaRecorder
					mediaRecorder = new MediaRecorder(combinedStream, {
						mimeType: 'video/webm;codecs=vp9'
					});
					
					// Set up recording
					mediaRecorder.ondataavailable = (event) => {
						if (event.data.size > 0) {
							recordedChunks.push(event.data);
						}
					};
					
					mediaRecorder.onstop = () => {
						// Create download link
						const blob = new Blob(recordedChunks, { type: 'video/webm' });
						const url = URL.createObjectURL(blob);
						const a = document.createElement('a');
						a.href = url;
						a.download = 'audio-visualization.webm';
						a.click();
						
						// Clean up
						URL.revokeObjectURL(url);
						exportMessage.textContent = 'Video exported successfully!';
						exportBtn.disabled = false;
						
						console.log('Video export completed');
					};
					
					// Calculate export duration
					const audioDuration = audioElement.duration;
					const frameDuration = 1 / 30; // 30 FPS
					const totalFrames = Math.ceil(audioDuration / frameDuration);
					
					console.log(`Audio duration: ${audioDuration}s, Total frames: ${totalFrames}`);
					
					// Start recording
					mediaRecorder.start();
					
					// Play audio from beginning
					audioElement.currentTime = 0;
					await audioElement.play();
					
					// Export for the full audio duration
					for (let frameIndex = 0; frameIndex < totalFrames; frameIndex++) {
						// Calculate which recorded frame to use (loop if needed)
						const recordedFrameIndex = frameIndex % recordedFrames.length;
						const recordedFrame = recordedFrames[recordedFrameIndex];
						
						// Draw the recorded frame to video canvas
						videoCtx.drawImage(recordedFrame, 0, 0);
						
						// Update progress
						const progress = (frameIndex / totalFrames) * 100;
						exportMessage.textContent = `Exporting... ${frameIndex + 1}/${totalFrames} (${progress.toFixed(1)}%)`;
						progressFill.style.width = `${progress}%`;
						
						// Wait for next frame (maintain 30 FPS)
						await new Promise(resolve => setTimeout(resolve, 33)); // ~30 FPS
					}
					
					// Stop recording
					mediaRecorder.stop();
					audioElement.pause();
					
				} catch (error) {
					console.error('Export error:', error);
					exportMessage.textContent = 'Export failed: ' + error.message;
					exportBtn.disabled = false;
				}
			}
			
			// Play audio function
			async function playAudio() {
				try {
					if (!audioContext) {
						initAudio();
					}
					
					if (audioContext.state === 'suspended') {
						await audioContext.resume();
					}
					
					// Only create MediaElementSource once per audio element
					if (!audioSourceCreated) {
						audioSource = audioContext.createMediaElementSource(audioElement);
						audioSource.connect(analyser);
						analyser.connect(audioContext.destination);
						audioSourceCreated = true;
						console.log('Audio source connected to analyzer');
					}
					
					await audioElement.play();
					isPlaying = true;
					
					playBtn.disabled = true;
					pauseBtn.disabled = false;
					stopBtn.disabled = false;
					
					audioStatus.textContent = 'Playing...';
					
					// Start animation
					animate();
				} catch (error) {
					console.error('Error playing audio:', error);
					audioStatus.textContent = 'Error playing audio';
				}
			}
			
			// Pause audio function
			function pauseAudio() {
				audioElement.pause();
				isPlaying = false;
				
				playBtn.disabled = false;
				pauseBtn.disabled = true;
				stopBtn.disabled = false;
				
				audioStatus.textContent = 'Paused';
				
				// Stop animation
				if (animationId) {
					cancelAnimationFrame(animationId);
				}
			}
			
			// Stop audio function
			function stopAudio() {
				audioElement.pause();
				audioElement.currentTime = 0;
				isPlaying = false;
				
				playBtn.disabled = false;
				pauseBtn.disabled = true;
				stopBtn.disabled = true;
				
				audioStatus.textContent = 'Stopped';
				
				// Stop animation
				if (animationId) {
					cancelAnimationFrame(animationId);
				}
				
				// Reset visualization
				resetVisualization();
			}
			
			// Reset visualization to initial state
			function resetVisualization() {
				createVisualizationObjects();
				draw();
				rmsValue.textContent = '0.00';
			}
			
			// Apply theme-specific effects
			function applyThemeEffects(rms) {
				const themeConfig = themes[currentTheme];
				
				switch (currentTheme) {
					case 'neon':
						// Add glow effect
						ctx.shadowBlur = 20;
						ctx.shadowColor = '#ff00ff';
						break;
					case 'retro':
						// Add scanlines
						ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
						ctx.lineWidth = 1;
						for (let i = 0; i < 400; i += 4) {
							ctx.beginPath();
							ctx.moveTo(0, i);
							ctx.lineTo(800, i);
							ctx.stroke();
						}
						break;
					case 'minimal':
						// Clean, simple style
						ctx.shadowBlur = 0;
						break;
					case 'cosmic':
						// Add stars
						ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';
						for (let i = 0; i < 100; i++) {
							const x = (i * 137.5) % 800;
							const y = (i * 97.3) % 400;
							const size = Math.sin(Date.now() * 0.001 + i) * 2 + 1;
							ctx.beginPath();
							ctx.arc(x, y, size, 0, Math.PI * 2);
							ctx.fill();
						}
						break;
					case 'fire':
						// Add flame effect
						ctx.shadowBlur = 15;
						ctx.shadowColor = '#ff4500';
						break;
				}
			}
			
			// Draw function
			function draw() {
				if (!ctx) return;
				
				const themeConfig = themes[currentTheme];
				
				// Clear canvas
				ctx.fillStyle = themeConfig.background;
				ctx.fillRect(0, 0, canvas.width, canvas.height);
				
				// Check if analyser is available
				if (!analyser) {
					// Draw a placeholder when no audio is connected
					drawPlaceholder(themeConfig);
					animationId = requestAnimationFrame(draw);
					return;
				}
				
				// Get audio data
				const dataArray = new Uint8Array(analyser.frequencyBinCount);
				analyser.getByteFrequencyData(dataArray);
				
				// Calculate RMS value
				let sum = 0;
				for (let i = 0; i < dataArray.length; i++) {
					sum += dataArray[i] * dataArray[i];
				}
				const rms = Math.sqrt(sum / dataArray.length);
				const normalizedRms = rms / 255;
				
				// Update RMS display
				if (rmsValue) {
					rmsValue.textContent = normalizedRms.toFixed(3);
				}
				
				// Draw based on current story
				switch (currentStory) {
					case 'original':
						drawOriginal(dataArray, normalizedRms, themeConfig);
						break;
					case 'waveform':
						drawWaveform(dataArray, themeConfig);
						break;
					case 'particles':
						drawParticles(normalizedRms, themeConfig);
						break;
					case 'circles':
						drawCircles(normalizedRms, themeConfig);
						break;
					case 'bars':
						drawBars(dataArray, themeConfig);
						break;
					case 'spiral':
						drawSpiral(normalizedRms, themeConfig);
						break;
					case 'matrix':
						drawMatrix(normalizedRms, themeConfig);
						break;
				}
				
				// Continue animation
				animationId = requestAnimationFrame(draw);
				
				// Capture frame if recording
				if (isRecording) {
					const frameCanvas = document.createElement('canvas');
					frameCanvas.width = canvas.width;
					frameCanvas.height = canvas.height;
					const frameCtx = frameCanvas.getContext('2d');
					
					if (frameCtx) {
						// Draw the current canvas content to the frame canvas
						frameCtx.drawImage(canvas, 0, 0);
						recordedFrames.push(frameCanvas);
					}
				}
			}
			
			// Draw placeholder when no audio is connected
			function drawPlaceholder(themeConfig) {
				// Draw a simple placeholder visualization
				ctx.fillStyle = themeConfig.circleColors[0];
				ctx.font = '24px Arial';
				ctx.textAlign = 'center';
				ctx.fillText('Load an audio file to see visualization', canvas.width / 2, canvas.height / 2);
				
				// Draw some animated circles
				const time = Date.now() * 0.001;
				for (let i = 0; i < 3; i++) {
					const x = canvas.width / 2 + Math.cos(time + i) * 50;
					const y = canvas.height / 2 + Math.sin(time + i) * 50;
					ctx.beginPath();
					ctx.arc(x, y, 10, 0, Math.PI * 2);
					ctx.fillStyle = themeConfig.circleColors[i % themeConfig.circleColors.length];
					ctx.fill();
				}
			}
			
			// Drawing functions for different stories
			function drawOriginal(dataArray, rms, themeConfig) {
				// Apply theme effects
				applyThemeEffects(rms);
				
				// Animate circles based on RMS
				circles.forEach((circle, i) => {
					circle.scale = 1 + rms * (i + 1) * 0.5;
					circle.rotation += rms * 0.1 * (i + 1);
					
					// Theme-specific circle effects
					if (currentTheme === 'neon') {
						circle.color = `hsl(${200 + i * 30 + rms * 100}, 70%, 60%)`;
					} else if (currentTheme === 'fire') {
						circle.color = `hsl(${20 + rms * 40}, 100%, ${50 + rms * 30}%)`;
					}
					
					// Draw circle
					ctx.save();
					ctx.translate(circle.x, circle.y);
					ctx.rotate(circle.rotation);
					ctx.scale(circle.scale, circle.scale);
					
					ctx.beginPath();
					ctx.arc(0, 0, circle.radius, 0, Math.PI * 2);
					ctx.fillStyle = circle.color;
					ctx.fill();
					
					ctx.restore();
				});
				
				// Animate bars based on frequency data
				bars.forEach((bar, i) => {
					const frequencyIndex = Math.floor(i * dataArray.length / bars.length);
					const frequencyValue = dataArray[frequencyIndex] / 255;
					bar.height = 50 + frequencyValue * 200;
					
					// Theme-specific bar effects
					if (currentTheme === 'neon') {
						bar.color = `hsl(${180 + frequencyValue * 180}, 80%, 60%)`;
					} else if (currentTheme === 'fire') {
						bar.color = `hsl(${20 + frequencyValue * 40}, 100%, ${50 + frequencyValue * 30}%)`;
					} else {
						bar.color = bar.originalColor;
					}
					
					// Draw bar
					ctx.fillStyle = bar.color;
					ctx.fillRect(bar.x - bar.width/2, bar.y - bar.height, bar.width, bar.height);
				});
				
				// Animate particles
				particles.forEach((particle, i) => {
					const speed = rms * 5;
					const angle = (i * 137.5 + Date.now() * 0.001) % (Math.PI * 2);
					
					// Add current position to trail
					particle.trail.push({ x: particle.x, y: particle.y });
					if (particle.trail.length > 10) {
						particle.trail.shift();
					}
					
					particle.x += Math.cos(angle) * speed;
					particle.y += Math.sin(angle) * speed;
					
					// Wrap particles around screen
					if (particle.x < 0) particle.x = 800;
					if (particle.x > 800) particle.x = 0;
					if (particle.y < 0) particle.y = 400;
					if (particle.y > 400) particle.y = 0;
					
					// Pulse opacity based on RMS
					particle.opacity = 0.3 + rms * 0.7;
					
					// Draw trail
					if (particle.trail.length > 0) {
						ctx.strokeStyle = particle.color;
						ctx.lineWidth = 2;
						ctx.globalAlpha = 0.3;
						ctx.beginPath();
						ctx.moveTo(particle.trail[0].x, particle.trail[0].y);
						for (let j = 1; j < particle.trail.length; j++) {
							ctx.lineTo(particle.trail[j].x, particle.trail[j].y);
						}
						ctx.stroke();
					}
					
					// Draw particle
					ctx.globalAlpha = particle.opacity;
					ctx.fillStyle = particle.color;
					ctx.beginPath();
					ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
					ctx.fill();
				});
				
				ctx.globalAlpha = 1;
				ctx.shadowBlur = 0;
			}
			
			function drawWaveform(dataArray, themeConfig) {
				const sliceWidth = canvas.width / dataArray.length;
				let x = 0;
				
				ctx.beginPath();
				ctx.moveTo(x, canvas.height / 2);
				
				for (let i = 0; i < dataArray.length; i++) {
					const v = dataArray[i] / 128.0;
					const y = (canvas.height / 2) + (v * canvas.height / 2);
					
					if (i === 0) {
						ctx.moveTo(x, y);
					} else {
						ctx.lineTo(x, y);
					}
					
					x += sliceWidth;
				}
				
				ctx.lineTo(canvas.width, canvas.height / 2);
				ctx.strokeStyle = themeConfig.circleColors[0];
				ctx.lineWidth = 3;
				ctx.stroke();
			}
			
			function drawParticles(rms, themeConfig) {
				// Update particles
				particles.forEach(particle => {
					// Move particles
					particle.x += particle.vx * (1 + rms * 2);
					particle.y += particle.vy * (1 + rms * 2);
					
					// Bounce off edges
					if (particle.x <= 0 || particle.x >= canvas.width) particle.vx *= -1;
					if (particle.y <= 0 || particle.y >= canvas.height) particle.vy *= -1;
					
					// Draw particle
					ctx.beginPath();
					ctx.arc(particle.x, particle.y, particle.size * (1 + rms), 0, Math.PI * 2);
					ctx.fillStyle = particle.color;
					ctx.fill();
				});
			}
			
			function drawCircles(rms, themeConfig) {
				// Update and draw circles
				circles.forEach(circle => {
					circle.angle += circle.speed * (1 + rms);
					
					const x = circle.x + Math.cos(circle.angle) * circle.radius * (1 + rms);
					const y = circle.y + Math.sin(circle.angle) * circle.radius * (1 + rms);
					
					ctx.beginPath();
					ctx.arc(x, y, circle.radius * (0.5 + rms), 0, Math.PI * 2);
					ctx.fillStyle = circle.color;
					ctx.fill();
				});
			}
			
			function drawBars(dataArray, themeConfig) {
				// Update and draw bars
				bars.forEach((bar, i) => {
					const frequencyIndex = Math.floor(i * dataArray.length / bars.length);
					const frequencyValue = dataArray[frequencyIndex] / 255;
					
					bar.targetHeight = frequencyValue * canvas.height * 0.8;
					bar.height += (bar.targetHeight - bar.height) * 0.1;
					
					ctx.fillStyle = bar.color;
					ctx.fillRect(bar.x, bar.y - bar.height, bar.width, bar.height);
				});
			}
			
			function drawSpiral(rms, themeConfig) {
				const centerX = canvas.width / 2;
				const centerY = canvas.height / 2;
				
				// Update and draw spiral elements
				spirals.forEach(spiral => {
					spiral.angle += spiral.speed * (1 + rms);
					
					const x = centerX + Math.cos(spiral.angle) * spiral.radius * (1 + rms);
					const y = centerY + Math.sin(spiral.angle) * spiral.radius * (1 + rms);
					
					ctx.beginPath();
					ctx.arc(x, y, spiral.size * (1 + rms), 0, Math.PI * 2);
					ctx.fillStyle = spiral.color;
					ctx.fill();
				});
			}
			
			function drawMatrix(rms, themeConfig) {
				// Update and draw matrix elements
				matrixElements.forEach(element => {
					element.value += (Math.random() - 0.5) * 0.1;
					element.value = Math.max(0, Math.min(1, element.value));
					
					const intensity = element.value * (1 + rms);
					
					ctx.fillStyle = `rgba(${themeConfig.colors[0]}, ${intensity})`;
					ctx.fillRect(element.x, element.y, element.width, element.height);
				});
			}
			
			// Initialize everything when page loads
			document.addEventListener('DOMContentLoaded', () => {
				// Initialize canvas
				const canvasElement = document.getElementById('visualizationCanvas') as HTMLCanvasElement;
				if (!canvasElement) {
					console.error('Canvas element not found');
					return;
				}
				
				canvas = canvasElement;
				const context = canvas.getContext('2d');
				if (!context) {
					console.error('Could not get 2D context');
					return;
				}
				ctx = context;
				
				// Set canvas size
				canvas.width = 800;
				canvas.height = 400;
				
				// Create initial visualization objects
				createVisualizationObjects();
				
				// Initialize audio context first
				initAudio();
				
				// Start animation loop after audio is initialized
				draw();
			});
		</script>
	</body>
</html> 